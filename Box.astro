---
type Breakpoint = "sm" | "md" | "lg" | "xl";
type SpacingValue = 0 | 1 | 2 | 3 | 4 | 5;
type SizeValue = number | string;

interface Props {
  margin?: Partial<Record<Breakpoint, SpacingValue>> | SpacingValue;
  padding?: Partial<Record<Breakpoint, SpacingValue>> | SpacingValue;
  width?: Partial<Record<Breakpoint, SizeValue>> | SizeValue;
  height?: Partial<Record<Breakpoint, SizeValue>> | SizeValue;
  maxWidth?: Partial<Record<Breakpoint, SizeValue>> | SizeValue;
  minWidth?: Partial<Record<Breakpoint, SizeValue>> | SizeValue;
  maxHeight?: Partial<Record<Breakpoint, SizeValue>> | SizeValue;
  minHeight?: Partial<Record<Breakpoint, SizeValue>> | SizeValue;
  class?: string;
}

const {
  margin,
  padding,
  width,
  height,
  maxWidth,
  minWidth,
  maxHeight,
  minHeight,
  class: className,
} = Astro.props;

const uniqueId = 'box-' + Math.random().toString(36).slice(2, 6);
const PREFIX = uniqueId + "-";
const usedClasses = new Set<string>();

const breakpoints: Record<Breakpoint, string> = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};

function generateCSS(): string {
  let css = "";
  const mediaQueries: Record<Breakpoint, string[]> = Object.fromEntries(
    (Object.keys(breakpoints) as Breakpoint[]).map(bp => [bp, []])
  ) as unknown as Record<Breakpoint, string[]>;

  function addRule(rule: string, breakpoint?: Breakpoint): void {
    if (breakpoint && breakpoints[breakpoint]) {
      mediaQueries[breakpoint].push(rule);
    } else {
      css += rule + "\n";
    }
  }

  usedClasses.forEach((fullClassName) => {
    const className = fullClassName.slice(PREFIX.length);
    let cssRule = "";

    const [property, value, breakpoint] = className.split("-");

    switch (property) {
      case "margin":
      case "padding":
        const numericValue = parseInt(value);
        const cssValue = numericValue === 0 ? "0" : `${numericValue * 0.25}rem`;
        cssRule = `${property}: ${cssValue};`;
        break;
      case "width":
      case "height":
      case "maxWidth":
      case "minWidth":
      case "maxHeight":
      case "minHeight":
        cssRule = `${property.replace(/([A-Z])/g, "-$1").toLowerCase()}: ${value};`;
        break;
    }

    if (cssRule) {
      addRule(`.${fullClassName} { ${cssRule} }`, breakpoint as Breakpoint);
    }
  });

  Object.entries(mediaQueries).forEach(([breakpoint, rules]) => {
    if (rules.length > 0) {
      css += `@media (min-width: ${breakpoints[breakpoint as Breakpoint]}) {\n${rules.join("\n")}\n}\n`;
    }
  });

  return css;
}

function getResponsiveClasses(
  prop: Partial<Record<Breakpoint, SpacingValue | SizeValue>> | SpacingValue | SizeValue | undefined,
  prefix: string
): string {
  if (typeof prop === "undefined") return "";
  
  if (typeof prop === "number" || typeof prop === "string") {
    const cls = `${prefix}-${prop}`;
    usedClasses.add(PREFIX + cls);
    return PREFIX + cls;
  }

  return Object.entries(prop)
    .map(([bp, value]) => {
      const cls = bp === "base" ? `${prefix}-${value}` : `${prefix}-${value}-${bp}`;
      usedClasses.add(PREFIX + cls);
      return PREFIX + cls;
    })
    .join(" ");
}

const classes = [
  getResponsiveClasses(margin, "margin"),
  getResponsiveClasses(padding, "padding"),
  getResponsiveClasses(width, "width"),
  getResponsiveClasses(height, "height"),
  getResponsiveClasses(maxWidth, "maxWidth"),
  getResponsiveClasses(minWidth, "minWidth"),
  getResponsiveClasses(maxHeight, "maxHeight"),
  getResponsiveClasses(minHeight, "minHeight"),
  className
].filter(Boolean).join(" ");

const cssContent = generateCSS();
---

<style set:html={cssContent}></style>

<div class={classes}>
  <slot />
</div>