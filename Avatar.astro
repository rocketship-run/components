---
export type ColorValue = 'gray' | 'gold' | 'bronze' | 'brown' | 'yellow' | 'amber' | 'orange' | 'tomato' | 'red' | 'ruby' | 'crimson' | 'pink' | 'plum' | 'purple' | 'violet' | 'iris' | 'indigo' | 'blue' | 'cyan' | 'teal' | 'jade' | 'green' | 'grass' | 'lime' | 'mint' | 'sky';
export type Variant = 'solid' | 'soft' | 'outline';
export type SizeValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
export type RadiusValue = 'none' | 'sm' | 'md' | 'lg' | 'full';

type ResponsiveValue<T> = T | Partial<Record<'sm' | 'md' | 'lg' | 'xl', T>>;
type WidthValue = 'auto' | 'full' | number | string;
type SpacingValue = number | string;

interface Props extends Partial<Record<'m' | 'mx' | 'my' | 'mt' | 'mr' | 'mb' | 'ml', ResponsiveValue<SpacingValue>>> {
  variant?: Variant;
  color?: ColorValue;
  size?: SizeValue;
  radius?: RadiusValue;
  src?: string;
  alt?: string;
  initials?: string;
  width?: ResponsiveValue<WidthValue>;
  height?: ResponsiveValue<SpacingValue>;
}

const { variant = 'solid', color, size = '4', radius = 'full', src, alt, initials, width, height, ...spacingProps } = Astro.props;

const uniqueId = 'avatar-' + Math.random().toString(36).slice(2, 6);
const PREFIX = uniqueId + "-";

const breakpoints: Record<'sm' | 'md' | 'lg' | 'xl', string> = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};

const darkTextColors = ['yellow', 'amber', 'lime', 'mint', 'sky'];

const sizeMap: Record<SizeValue, { size: string; fontSize: string; }> = {
  '1': { size: '16px', fontSize: '10px' },
  '2': { size: '20px', fontSize: '12px' },
  '3': { size: '24px', fontSize: '14px' },
  '4': { size: '32px', fontSize: '16px' },
  '5': { size: '40px', fontSize: '18px' },
  '6': { size: '48px', fontSize: '20px' },
  '7': { size: '56px', fontSize: '22px' },
  '8': { size: '64px', fontSize: '24px' },
  '9': { size: '72px', fontSize: '26px' },
};

function generateResponsiveStyles(prop: ResponsiveValue<any> | undefined, cssProperty: string): string {
  if (typeof prop === "undefined") return "";
  
  if (typeof prop !== "object") {
    return `${cssProperty}: ${prop};`;
  }

  let styles = "";
  Object.entries(prop).forEach(([bp, value]) => {
    if (bp === "base") {
      styles += `${cssProperty}: ${value};`;
    } else if (bp in breakpoints) {
      styles += `@media (min-width: ${breakpoints[bp as keyof typeof breakpoints]}) { ${cssProperty}: ${value}; }`;
    }
  });
  return styles;
}

function generateSpacingStyles(props: Partial<Record<'m' | 'mx' | 'my' | 'mt' | 'mr' | 'mb' | 'ml', ResponsiveValue<SpacingValue>>>): string {
  const directions = {
    m: 'margin', mx: 'margin-left,margin-right', my: 'margin-top,margin-bottom', 
    mt: 'margin-top', mr: 'margin-right', mb: 'margin-bottom', ml: 'margin-left'
  };
  let styles = "";

  Object.entries(props).forEach(([prop, value]) => {
    if (prop in directions) {
      const cssProps = directions[prop as keyof typeof directions].split(',');
      cssProps.forEach(cssProp => {
        styles += generateResponsiveStyles(value, cssProp);
      });
    }
  });

  return styles;
}

function generateColorStyles(color: ColorValue | undefined, variant: Variant): string {
  if (color) {
    const isLightColor = darkTextColors.includes(color);
    return `
      background-color: ${variant === 'solid' ? `var(--${color}-9)` :
                          variant === 'soft' ? `var(--${color}-3)` : 'transparent'};
      color: ${variant === 'solid' && !isLightColor ? 'white' : `var(--${color}-11)`};
      ${variant === 'outline' ? `border: 1px solid var(--${color}-7);` : ''}
    `;
  } else {
    // Use theme accent color when no specific color is provided
    return `
      background-color: ${variant === 'solid' ? 'var(--rs-theme-accent-9)' :
                          variant === 'soft' ? 'var(--rs-theme-accent-3)' : 'transparent'};
      color: ${variant === 'solid' ? 'var(--rs-theme-accent-contrast)' : 'var(--rs-theme-accent-11)'};
      ${variant === 'outline' ? 'border: 1px solid var(--rs-theme-accent-7);' : ''}
    `;
  }
}


function generateAvatarStyles(): string {
  const baseStyles = `
    display: inline-flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    font-weight: 500;
  `;

  const { size: dimensions, fontSize } = sizeMap[size];
  const sizeStyles = `
    width: ${dimensions};
    height: ${dimensions};
    font-size: ${fontSize};
  `;

  const radiusStyles = `
    border-radius: ${radius === 'none' ? '0' :
                     radius === 'sm' ? 'var(--rs-radius-1, 0.125rem)' :
                     radius === 'md' ? 'var(--rs-radius-2, 0.25rem)' :
                     radius === 'lg' ? 'var(--rs-radius-3, 0.5rem)' :
                     radius === 'full' ? '50%' : '50%'};
  `;

  const colorStyles = generateColorStyles(color, variant);

  const widthStyles = generateResponsiveStyles(width, 'width');
  const heightStyles = generateResponsiveStyles(height, 'height');
  const spacingStyles = generateSpacingStyles(spacingProps);

  return `
    .${PREFIX}avatar {
      ${baseStyles}
      ${sizeStyles}
      ${radiusStyles}
      ${colorStyles}
      ${widthStyles}
      ${heightStyles}
      ${spacingStyles}
    }
    .${PREFIX}avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .${PREFIX}avatar svg {
      width: 60%;
      height: 60%;
    }
  `;
}

const avatarStyles = generateAvatarStyles();
---

<style set:html={avatarStyles}></style>

<span class={`${PREFIX}avatar`}>
  {src ? (
    <img src={src} alt={alt || 'Avatar'} />
  ) : initials ? (
    initials.slice(0, 2).toUpperCase()
  ) : (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
      <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
    </svg>
  )}
</span>