---
type ColorValue = string;
type Variant = 'solid' | 'soft' | 'outline' | 'ghost' | 'surface';
type TextScaleValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
type ResponsiveValue<T> = T | Partial<Record<'sm' | 'md' | 'lg' | 'xl', T>>;
type WidthValue = 'auto' | 'full' | number | string;
type SpacingValue = number | string;

interface Props extends Partial<Record<'m' | 'mx' | 'my' | 'mt' | 'mr' | 'mb' | 'ml', ResponsiveValue<SpacingValue>>> {
  variant?: Variant;
  color?: ColorValue;
  size?: TextScaleValue;
  radius?: 'none' | 'sm' | 'md' | 'lg' | 'full';
  width?: ResponsiveValue<WidthValue>;
  height?: ResponsiveValue<SpacingValue>;
}

const {
  variant = 'solid',
  color,
  size = '2',
  radius,
  width,
  height,
  ...spacingProps
} = Astro.props;

const uniqueId = 'btn-' + Math.random().toString(36).slice(2, 6);
const PREFIX = uniqueId + "-";

const breakpoints: Record<'sm' | 'md' | 'lg' | 'xl', string> = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};

const darkTextColors = ['yellow', 'amber', 'lime', 'mint', 'sky'];

const textScaleMap: Record<TextScaleValue, { fontSize: string; lineHeight: string; letterSpacing: string; }> = {
  '1': { fontSize: '12px', lineHeight: '16px', letterSpacing: '0.0025em' },
  '2': { fontSize: '14px', lineHeight: '20px', letterSpacing: '0em' },
  '3': { fontSize: '16px', lineHeight: '24px', letterSpacing: '0em' },
  '4': { fontSize: '18px', lineHeight: '26px', letterSpacing: '-0.0025em' },
  '5': { fontSize: '20px', lineHeight: '28px', letterSpacing: '-0.005em' },
  '6': { fontSize: '24px', lineHeight: '30px', letterSpacing: '-0.00625em' },
  '7': { fontSize: '28px', lineHeight: '36px', letterSpacing: '-0.0075em' },
  '8': { fontSize: '35px', lineHeight: '40px', letterSpacing: '-0.01em' },
  '9': { fontSize: '60px', lineHeight: '60px', letterSpacing: '-0.025em' },
};

function generateResponsiveStyles(prop: ResponsiveValue<any> | undefined, cssProperty: string): string {
  if (typeof prop === "undefined") return "";
  
  if (typeof prop !== "object") {
    return `${cssProperty}: ${prop};`;
  }

  let styles = "";
  Object.entries(prop).forEach(([bp, value]) => {
    if (bp === "base") {
      styles += `${cssProperty}: ${value};`;
    } else {
      styles += `@media (min-width: ${breakpoints[bp as keyof typeof breakpoints]}) { ${cssProperty}: ${value}; }`;
    }
  });
  return styles;
}

function generateSpacingStyles(props: Partial<Record<'m' | 'mx' | 'my' | 'mt' | 'mr' | 'mb' | 'ml', ResponsiveValue<SpacingValue>>>): string {
  const directions = { m: 'margin', mx: 'margin-left,margin-right', my: 'margin-top,margin-bottom', mt: 'margin-top', mr: 'margin-right', mb: 'margin-bottom', ml: 'margin-left' };
  let styles = "";

  Object.entries(props).forEach(([prop, value]) => {
    const cssProps = directions[prop as keyof typeof directions].split(',');
    cssProps.forEach(cssProp => {
      styles += generateResponsiveStyles(value, cssProp);
    });
  });

  return styles;
}

function generateButtonStyles(): string {
  const baseStyles = `
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-family: inherit;
    font-weight: 500;
    white-space: nowrap;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
  `;

  const sizeStyles = `
    height: ${size === '1' ? '1.5rem' :
             size === '2' ? '2rem' :
             size === '3' ? '2.5rem' :
             size === '4' ? '3rem' :
             size === '5' ? '3.5rem' : '2rem'};
    padding: ${size === '1' ? '0 0.5rem' :
               size === '2' ? '0 0.75rem' :
               size === '3' ? '0 1rem' :
               size === '4' ? '0 1.25rem' :
               size === '5' ? '0 1.5rem' : '0 0.75rem'};
  `;

  const radiusStyles = `
    border-radius: ${radius === 'none' ? '0' :
                     radius === 'sm' ? 'var(--rs-radius-1, 0.125rem)' :
                     radius === 'md' ? 'var(--rs-radius-2, 0.25rem)' :
                     radius === 'lg' ? 'var(--rs-radius-3, 0.5rem)' :
                     radius === 'full' ? '9999px' : 'var(--rs-theme-radius)'};
  `;

  const variantStyles = color ? generateColorStyles(color, variant) : `
    background-color: ${variant === 'solid' ? 'var(--rs-theme-accent-9)' :
                        variant === 'soft' ? 'var(--rs-theme-accent-3)' :
                        variant === 'surface' ? 'var(--rs-theme-accent-2)' : 'transparent'};
    color: ${variant === 'solid' ? 'var(--rs-theme-accent-contrast)' : 'var(--rs-theme-accent-11)'};
    ${variant === 'outline' ? 'box-shadow: inset 0 0 0 1px var(--rs-theme-accent-7);' : ''}
    &:hover {
      background-color: ${variant === 'solid' ? 'var(--rs-theme-accent-10)' :
                          variant === 'ghost' ? 'var(--rs-theme-accent-3)' : 'var(--rs-theme-accent-4)'};
    }
  `;

  const { fontSize, lineHeight, letterSpacing } = textScaleMap[size];
  const textStyles = `
    font-size: ${fontSize};
    line-height: ${lineHeight};
    letter-spacing: ${letterSpacing};
  `;

  const widthStyles = generateResponsiveStyles(width, 'width');
  const heightStyles = generateResponsiveStyles(height, 'height');
  const spacingStyles = generateSpacingStyles(spacingProps);

  return `
    .${PREFIX}button {
      ${baseStyles}
      ${sizeStyles}
      ${radiusStyles}
      ${variantStyles}
      ${textStyles}
      ${widthStyles}
      ${heightStyles}
      ${spacingStyles}
    }
    .${PREFIX}button-inner {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
    }
  `;
}

const generateColorStyles = (color: ColorValue, variant: Variant) => {
  const isLightColor = darkTextColors.includes(color);
  return `
    background-color: ${variant === 'solid' ? `var(--${color}-9)` :
                        variant === 'soft' ? `var(--${color}-3)` :
                        variant === 'surface' ? `var(--${color}-2)` : 'transparent'};
    color: ${variant === 'solid' && !isLightColor ? 'white' : `var(--${color}-11)`};
    ${variant === 'outline' ? `box-shadow: inset 0 0 0 1px var(--${color}-7);` : ''}
    &:hover {
      background-color: ${variant === 'solid' ? `var(--${color}-10)` :
                          variant === 'ghost' ? `var(--${color}-3)` : `var(--${color}-4)`};
    }
  `;
};

const buttonStyles = generateButtonStyles();
---

<style set:html={buttonStyles}></style>

<button class={`${PREFIX}button`}>
  <span class={`${PREFIX}button-inner`}><slot /></span>
</button>